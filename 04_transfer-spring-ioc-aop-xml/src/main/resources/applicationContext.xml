<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="
        http://www.springframework.org/schema/beans
        https://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        https://www.springframework.org/schema/context/spring-context.xsd
        http://www.springframework.org/schema/aop
        https://www.springframework.org/schema/aop/spring-aop.xsd
        http://www.springframework.org/schema/tx
        https://www.springframework.org/schema/tx/spring-tx.xsd
">

    <!--开启注解扫描，base-package指定扫描的包路径-->
    <context:component-scan base-package="prosayj.springiocxmlannotation"/>

    <!--引入外部资源文件-->
    <context:property-placeholder location="classpath:jdbc.properties"/>

    <!--第三方jar中的bean定义在xml中-->
    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource">
        <property name="driverClassName" value="${jdbc.driver}"/>
        <property name="url" value="${jdbc.url}"/>
        <property name="username" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>
    </bean>

    <bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
        <constructor-arg name="dataSource" ref="dataSource"/>
    </bean>

    <!--spring声明式事务配置，声明式事务无非就是配置一个aop，只不过有些标签不一样罢了-->
    <!--横切逻辑-->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <constructor-arg name="dataSource" ref="dataSource"/>
    </bean>

    <!--Spring ioc 实例化Bean的三种方式-->
    <!--方式一：使用无参构造器（推荐）-->
    <bean id="connectionUtils" class="prosayj.springiocxmlannotation.transfer.utils.ConnectionUtils">
        <property name="dataSource" ref="dataSource"/>
    </bean>
    <!--另外两种方式是为了我们自己new的对象加入到SpringIOC容器管理-->
    <!--方式二：静态方法-->
    <!--    <bean id="connectionUtils"-->
    <!--          class="prosayj.springiocxml.transfer.utils.CreateBeanFactory"-->
    <!--          factory-method="getInstanceStatic"/>-->
    <!--方式三：实例化方法-->
    <!-- <bean id="createBeanFactory" class="prosayj.springiocxml.transfer.utils.CreateBeanFactory"/>
     <bean id="connectionUtils" factory-bean="createBeanFactory" factory-method="getInstance"/>-->


    <tx:advice id="txAdvice" transaction-manager="transactionManager">
        <!--定制事务细节，传播行为、隔离级别等-->
        <tx:attributes>
            <!--一般性配置-->
            <tx:method name="*" read-only="false" propagation="REQUIRED" isolation="DEFAULT" timeout="-1"/>
            <!--针对查询的覆盖性配置-->
            <tx:method name="query*" read-only="true" propagation="SUPPORTS"/>
        </tx:attributes>
    </tx:advice>

    <bean id="myBeanPostProcessor" class="prosayj.springiocxmlannotation.transfer.pojo.MyBeanPostProcessor"/>
    <!--
          lazy-init：延迟加载，true代表延迟，false代表立即加载，默认是false
      -->
    <bean id="lazyResult"
          class="prosayj.springiocxmlannotation.transfer.pojo.Result"
          init-method="initMethod"/>

    <bean id="accountDao"
          class="prosayj.springiocxmlannotation.transfer.dao.impl.JdbcAccountDaoImpl"
          scope="singleton"
          init-method="init"
          destroy-method="destory"
    >

        <!--set注入使用property标签，如果注入的是另外一个bean那么使用ref属性，如果注入的是普通值那么使用的是value属性-->
        <!--<property name="ConnectionUtils" ref="connectionUtils"/>
        <property name="name" value="zhangsan"/>
        <property name="sex" value="1"/>
        <property name="money" value="100.3"/>-->


        <!--<constructor-arg index="0" ref="connectionUtils"/>
        <constructor-arg index="1" value="zhangsan"/>
        <constructor-arg index="2" value="1"/>
        <constructor-arg index="3" value="100.5"/>-->


        <!--name：按照参数名称注入，index按照参数索引位置注入-->
        <constructor-arg name="connectionUtils" ref="connectionUtils"/>
        <constructor-arg name="name" value="zhangsan"/>
        <constructor-arg name="sex" value="1"/>
        <constructor-arg name="money" value="100.6"/>

        <!--set注入注入复杂数据类型-->
        <property name="myArray">
            <array>
                <value>array1</value>
                <value>array2</value>
                <value>array3</value>
            </array>
        </property>

        <property name="myMap">
            <map>
                <entry key="key1" value="value1"/>
                <entry key="key2" value="value2"/>
            </map>
        </property>

        <property name="mySet">
            <set>
                <value>set1</value>
                <value>set2</value>
            </set>
        </property>

        <property name="myProperties">
            <props>
                <prop key="prop1">value1</prop>
                <prop key="prop2">value2</prop>
            </props>
        </property>

    </bean>
    <bean id="transferService" class="prosayj.springiocxmlannotation.transfer.service.impl.TransferServiceImpl">
        <!--set+ name 之后锁定到传值的set方法了，通过反射技术可以调用该方法传入对应的值-->
        <property name="AccountDao" ref="accountDao"/>
    </bean>



    <!--进行aop相关的xml配置,配置aop的过程其实就是把aop相关术语落地  横切逻辑bean-->
    <bean id="logUtils" class="prosayj.springiocxmlannotation.transfer.utils.LogUtils"/>
    <!--使用config标签表明开始aop配置,在内部配置切面aspect-->

    <!--aspect   =    切入点（锁定方法） + 方位点（锁定方法中的特殊时机）+ 横切逻辑 -->
    <aop:config>
        <aop:aspect id="logAspect" ref="logUtils">
            <!--切入点锁定我们感兴趣的方法，使用aspectj语法表达式-->
            <!--<aop:pointcut id="pt1" expression="execution(* *..*.*(..))"/>-->
            <aop:pointcut id="pt1"
                          expression="execution(* prosayj.springiocxmlannotation.transfer.service.impl.TransferServiceImpl.*(..))"/>
            <!--方位信息,pointcut-ref关联切入点-->
            <!--aop:before前置通知/增强-->
            <aop:before method="beforeMethod" pointcut-ref="pt1"/>
            <!--aop:after，最终通知，无论如何都执行-->
            <!--aop:after-returnning，正常执行通知-->
            <!--            <aop:after-returning method="successMethod" pointcut-ref="pt1" returning="retValue"/>-->
            <!--aop:after-throwing，异常通知-->
            <aop:around method="arroundMethod" pointcut-ref="pt1"/>
        </aop:aspect>
    </aop:config>


    <!--开启aop注解驱动
        proxy-target-class:true强制使用cglib.
    -->
    <aop:aspectj-autoproxy/>
    <!--声明式事务的注解驱动-->
    <tx:annotation-driven transaction-manager="transactionManager"/>
</beans>
