<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:p="http://www.springframework.org/schema/p"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
                           http://www.springframework.org/schema/beans/spring-beans.xsd
                           http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd
                           http://www.springframework.org/schema/tx
                           http://www.springframework.org/schema/tx/spring-tx.xsd
                           http://www.springframework.org/schema/mvc
                           http://www.springframework.org/schema/mvc/spring-mvc.xsd
                           http://www.springframework.org/schema/aop
                           http://www.springframework.org/schema/aop/spring-aop.xsd">
    <!--Spring的配置文件与⼩配置文件进行整合-->
    <!--resources 下的文件在整个程序编译完后会被放到 classpath 目录下，src.main.java中的文件也是-->
    <context:property-placeholder location="classpath:/db.properties"/>

    <!-- ///////////////////////////////////////////////////////////////////////////////// -->
    <!--属性 property 注入-->
    <bean id="person" class="prosayj.thinking.spring._01_ioc_hello_world.domain.Person">
        <property name="pAge" value="24"/>
        <property name="pName" value="property设值注入用户名称"/>
    </bean>
    <!--基于p名称空间的简化写法 注入-->
    <bean id="person1" class="prosayj.thinking.spring._01_ioc_hello_world.domain.Person"
          p:pName="基于p名称空间的简化写法"
          p:pAge="25"/>

    <!--构造注入 的重载1 -->
    <bean id="/person" class="prosayj.thinking.spring._01_ioc_hello_world.domain.Person">
        <constructor-arg value="构造注入用户名称"/>
        <constructor-arg value="26"/>
    </bean>
    <!--构造注入 的重载2 -->
    <bean id="person2" class="prosayj.thinking.spring._01_ioc_hello_world.domain.Person">
        <constructor-arg value="重载构造注入用户名称" type="java.lang.String"/>
    </bean>
    <!--构造注入 的重载3 -->
    <bean id="person3" class="prosayj.thinking.spring._01_ioc_hello_world.domain.Person">
        <constructor-arg value="27" type="int"/>
    </bean>

    <bean class="prosayj.thinking.spring._01_ioc_hello_world.domain.Person"/>
    <bean class="prosayj.thinking.spring._01_ioc_hello_world.domain.Person"/>
    <bean name="pname" class="prosayj.thinking.spring._01_ioc_hello_world.domain.Person"/>
    <bean name="pppp,/pppp" class="prosayj.thinking.spring._01_ioc_hello_world.domain.Person"/>
    <!-- ///////////////////////////////////////////////////////////////////////////////// -->


    <!-- ///////////////////////////////////////////////////////////////////////////////// -->
    <!-- String+8种基本类型 注入-->
    <bean id="customer" class="prosayj.thinking.spring._03_injection.CustomerDomain">
        <property name="age" value="24"/>
        <property name="name" value="李四"/>
        <!--数组-->
        <property name="emails">
            <list>
                <value>aaaa@qq.com</value>
                <value>bbbb@qq.com</value>
                <value>cccc@qq.com</value>
            </list>
        </property>
        <!--set集合-->
        <property name="phones">
            <set>
                <value>138xxxxxxxxxx</value>
                <value>139xxxxxxxxxx</value>
                <!--set会自动去重-->
                <value>138xxxxxxxxxx</value>
            </set>
        </property>
        <!--list集合-->
        <property name="address">
            <list>
                <value>China</value>
                <value>Earth</value>
                <value>hell</value>
            </list>
        </property>
        <!--map集合-->
        <property name="maps">
            <map>
                <entry key="hello" value="12312312312"/>
                <entry key="world" value="21314214214"/>
            </map>
        </property>
        <!--properties配置-->
        <property name="properties">
            <props>
                <prop key="key1">value1</prop>
                <prop key="key2">value2</prop>
                <prop key="key3">value3</prop>
            </props>
        </property>
    </bean>
    <!-- ///////////////////////////////////////////////////////////////////////////////// -->


    <!-- ///////////////////////////////////////////////////////////////////////////////// -->
    <bean id="userDao" class="prosayj.thinking.spring.common.dao.UserDaoImpl"/>
    <bean id="userService" class="prosayj.thinking.spring.common.service.UserServiceImpl"
          p:userDao-ref="userDao">
        <!--
        <property name="userDao">
            <bean class="prosayj.thinking.spring.dao.impl.UserDaoImpl"/>
        </property>
        -->
        <!--<property name="userDao" ref="userDao"/>-->
    </bean>
    <!-- ///////////////////////////////////////////////////////////////////////////////// -->


    <!-- ///////BeanFactory////////////////////////////////////////////////////////////////////////// -->
    <!--class 指定了 ConnectionFactoryBean, 获得的是该类创建的复杂对象 Connection -->
    <bean id="conn" class="prosayj.thinking.spring._05_configuration_parameterization.ConnectionFactoryBean">
        <property name="driverClassName" value="${jdbc.driverClassName}"/>
        <property name="url" value="${jdbc.url}"/>
        <property name="username" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>
    </bean>
    <!--实例工厂-->
    <!-- 先创建出工厂实例 -->
    <bean id="connFactory" class="prosayj.thinking.spring.factotybean.ConnectionFactory"/>
    <!-- 通过工厂实例里的方法创建复杂对象 -->
    <bean id="conn2" factory-bean="connFactory" factory-method="getConnection"/>
    <!--静态工厂-->
    <bean id="conn3" class="prosayj.thinking.spring.factotybean.StaticConnectionFactoryBean" factory-method="getConnection"/>
    <!-- ///////BeanFactory////////////////////////////////////////////////////////////////////////// -->


    <!-- /////////////自定义转换器 + 控制简单对象创建次数//////////////////////// -->
    <!--自定义类型转换器-->
    <!-- 配置文件完成对日期格式的赋值 -->
    <!--Spring 框架其实内置了日期类型的转换器：日期格式必须是 2021/01/02-->
    <bean id="myDateConverter" class="prosayj.thinking.spring._06_customer_convertor.MyDateConverter">
        <property name="pattern" value="yyyy-MM-dd"/>
    </bean>
    <bean id="myDateConverter2" class="prosayj.thinking.spring._06_customer_convertor.MyDateConverter">
        <property name="pattern" value="yyyyMMdd"/>
    </bean>
    <!--ConversionSeviceFactoryBean 定义 id属性，值必须是 conversionService-->
    <bean id="conversionService" class="org.springframework.context.support.ConversionServiceFactoryBean">
        <property name="converters">
            <set>
                <ref bean="myDateConverter"/>
                <ref bean="myDateConverter2"/>
            </set>
        </property>
    </bean>
    <!--控制简单对象创建次数-->
    <bean id="scopeSingleton" class="prosayj.thinking.spring._03_injection.Account">
        <property name="owner" value="张三"/>
        <property name="createTime" value="2021-01-02"/>
        <property name="updateTime" value="20210131"/>
    </bean>
    <bean id="scopePrototype" scope="prototype" class="prosayj.thinking.spring._03_injection.Account">
        <property name="owner" value="张三"/>
        <property name="createTime" value="2021-01-02"/>
        <property name="updateTime" value="20210131"/>
    </bean>
    <!-- ///////////////////////////////////////////////////////////////////////////////// -->

    <!-- /////////////springBean 的生命周期//////////////////////// -->
    <!--如果⼀个对象既实现 InitializingBean 同时⼜提供的 普通的初始化方法，先执行 InitializingBean，再执行 普通初始化方法。-->
    <!--注入⼀定发生在初始化操作的前面。-->
    <!--销毁方法的操作只适用于 scope="singleton"，初始化操作都适用。-->
    <bean id="lifeCycleDomin"
          scope="prototype"
          class="prosayj.thinking.spring._04_bean_lifecycle.LifeCycleDomin"
          init-method="myAfterPropertiesSet"
          destroy-method="myDestroy">
        <property name="name" value="张三"/>
    </bean>
    <bean id="myBeanPostProcessor" class="prosayj.thinking.spring._04_bean_lifecycle.MyBeanPostProcessor"/>
    <bean id="categroy" class="prosayj.thinking.spring._04_bean_lifecycle.CategoryDomain">
        <property name="id" value="10"/>
        <property name="name" value="北京"/>
    </bean>
    <!-- ///////////////////////////////////////////////////////////////////////////////// -->


    <!-- /////////////spring-动态代理//////////////////////// -->
    <!-- 额外功能 -->
    <bean id="before" class="prosayj.thinking.spring._10_aop_spring_aspectj.Before"/>
    <!--切入点:额外功能的加入-->
    <!--⽬的：由程序员根据⾃⼰的需要，决定额外功能加入给哪个原始方法(register、login)-->
    <!-- 简单的测试：所有方法都做为切入点，都加入额外的功能-->
<!--    <aop:config>-->
<!--        <aop:pointcut id="pc" expression="execution(* * (..))"/>-->
<!--        &lt;!&ndash;表达的含义: 所有的方法 都加入before的额外功能&ndash;&gt;-->
<!--        <aop:advisor advice-ref="before" pointcut-ref="pc"/>-->
<!--    </aop:config>-->
    <!-- ///////////////////////////////////////////////////////////////////////////////// -->


</beans>
